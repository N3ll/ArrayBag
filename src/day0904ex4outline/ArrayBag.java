package day0904ex4outline;public class ArrayBag<T> implements BagI<T> {	private final T[] arr;	private int index;	private static int DEFAULT_CAPACITY = 25;	/** Creates an empty bag whose initial capacity is 25. */	public ArrayBag(int capacity) {		@SuppressWarnings("unchecked")		T[] temp = (T[]) new Object[capacity]; 		this.arr = temp;		this.index = 0; 	}	public ArrayBag() {		this(DEFAULT_CAPACITY);	}	@Override	public boolean add(T newEntry) {		if (isFull()) {			return false;		} else {			arr[index] = newEntry;			this.index++;		}		return true;	}	@Override	public boolean isFull() {		if (arr.length == this.index) {			return true;		}		return false;	}	@Override	public T[] toArray() {		@SuppressWarnings("unchecked")		T[] temp = (T[]) new Object[index];		for (int i = 0; i < this.index; i++) {			temp[i] = arr[i];		}		return temp;	}	@Override	public boolean isEmpty() {		if (this.index == 0) {			return true;		}		return false;	}	@Override	public int getCurrentSize() {		return this.index;	}	@Override	public int getFrequencyOf(T anEntry) {		int count = 0;		for (int i = 0; i < this.index; i++) {			if (arr[i].equals(anEntry)) {				count++;			}		}		return count;	}	@Override	public boolean contains(T anEntry) {		for (int i = 0; i < this.index; i++) {			if (arr[i].equals(anEntry)) {				return true;			}		}		return false;	}	@Override	public void clear() {		for (int i = 0; i < this.index; i++) {			arr[i] = null;		}	}	@Override	public T remove() {		T temp = null;		if (!isEmpty()) {			temp = arr[index - 1];			arr[index - 1] = null;			index--;		}		return temp;	}	@Override	public boolean remove(T anEntry) {		boolean result = false;		if (!isEmpty() && contains(anEntry)) {			for (int i = 0; i < this.index; i++) {				if (arr[i].equals(anEntry)) {					arr[i] = arr[index - 1];					result = true;					index--;				}			}		}		return result;	}}